we will use .gitignore generator to generate the code of .gitignore

For not restarting node we will use nodemon, it will automatically restart the server
to Install nodemon we will use command "npm i -D nodemon"


we will controllers and middleware in database which will keep check on who is accessing
its code "mkdir controllers db middleware models routes utils


we will install prettier so that while working in group in there should be no conflict in code
like spacing, anyone left semi colne or commas
command line "npm i -D prettier"
after running this command we need add some files mannualy to use it like .prettierrc,.prettierignore
in .prettierignore we will write names of all files/folders in which we don't want prettier to implement


DATABASE Connection

after this we will do setup on mongoDB ATLAS
Disclamer:- Don't share password
then connect it on .env files
PORT=8000
MONGODB_URI=mongodb+srv://aman:<Your password>@cluster0.nhfky3t.mongodb.net
if there is @ in password use %40 in place of @ to decode it



After this install mongoose, express and dotenv in folders
command - "npm i mongoose express dotenv"
we can check in package.json dependencies 

DATABASE IS ALWAYS STORED IN ANOTHER CONTINENT-----> QUOTE
THERE CAN BE MANY ERRORS IN COMMUNICATING WITH DATABASE, TO AVOID IT WE USE ASYNC, FETCH LIKE ";(async()=>{})()"



now we will install. cokkie-parser and cors 
command - "npm i cookie-parser cors"

app.use is used to get middlewares and configurations
app.use(cors({
    here we will give acess to database whom we want
}))


app.use(express.json({limit:"10kb"}))
like this we will set the limit to json files

app.use(express.urlencoded({extended: true, limit: "10kb"}))
it is used to take data from URLs


app.use(express.static("public"))
in this we give access to data to public and here public is the name of the folders





Utility folder asynkHandeling files
const connectDB = async () =>{
    try {
        const connectionInstance = await mongoose.connect
        (`${process.env.MONGODB_URI}/${DB_NAME}`)
        console.log(`\n MongoDB connected !! DB HOST: ${connectionInstance.connection.host}`);
        
    } catch (error){
        console.log("MongoDB connection error",error);
        process.exit(1)
    }
}

we need to write this again and again so in place of that we will create a util file and declare it there
after declaring we will call it



In place of above code we can 
const asyncHandler = () => {
    (res,req,next)=>{
        Promise.resolve(requestHandler(req, res, next)).catch((err) => next(err))
    }
}

export {asyncHandler}



For API ERROR
This is a custom error class that extends the built-in JavaScript Error class. Let me explain its components and suggest some improvements.

Current Implementation Analysis
Class Structure
Constructor Parameters
statusCode: HTTP status code for the error
message: Error message (defaults to "Something went wrong")
error: Array to store error details (defaults to empty array)
statck: Stack trace (note: there's a typo in 'statck')
Properties
statusCode: Stores the HTTP status code
data: Set to null (but not using the passed error array)
HTTP Status Codes

Use appropriate status codes
400: Bad Request
401: Unauthorized
403: Forbidden
404: Not Found
500: Internal Server Error
Error Handling

Implement with try-catch blocks
Use with async error handlers
Include in global error middleware
This custom error class is essential for consistent error handling across your API application.




Mongoose Aggregate Paginate Explanation
Mongoose Aggregate Paginate is a powerful plugin that adds pagination 
support to MongoDB aggregation operations. It's particularly useful when you need 
to paginate the results of complex aggregation pipelines.
Features and Benefits
Pagination Support

page: Current page number
limit: Number of documents per page
sort: Sorting options
Code to install mongoose Aggregate paginate
command -- "npmi mongoose-aggregate-paginate-v2"


bcrypt is used to encode and decode the password
command- "npm install bcrypt"

now we will install jsonwebtokens to hash code
command- "npm install jsonwebtoken"


What is Http headers?
HTTP headers are key-value pairs of metadata exchanged between a client (e.g., a web browser)
and a server during an HTTP communication. They are sent at the beginning of an HTTP request or response,
preceding the message body, and provide essential information about the communication or the resource being transferred.

MetaData - key value sent alomg with request and response. It can error also like server not found.
Request Header --> from client
Response Header --> from Server
Representation Header --> encoding/compression. (used to send lot of data in compressed format)
Payload Headers --> data
Security Header


Most common Headers
1. Accept: application/json
2. Agent 
3. Authentication 
4. Content type
5. cookie
6. Cache Control 


there are some mores Headers to which is used in Production grade companies 
CORS 
Access-Control-Allow-Origin
Access-Control-Allow-Credentials
Access-Control-Allow-Methods

Security
Cross-Origin-Embedded-Policy
Cross-Origin-Opener-Policy
Content-Security-Policy
X-XSS-Protection



HTTP Methods
Basic set of operations that can be used to interact eith the server 
1. GET : retrive a resource
2. HEAD : No message body (response headers only)
3. OPTIONS : what operations are available 
4. TRACE : loopback test (get some data)
5. DELETE : remove a resource 
6. PUT : replace a resource 
7. POST : interact with resource (mostly add)
8. PATCH ; Change part of a resource


HTTP Status Code
1XX --> information
2XX --> Success
3XX --> Redirection
4XX --> Client Error
5XX --> Server Error

Example
100 --> Continue
102 --> Processing
200 --> OK
201 --> created
202 --> Accepted
307 --> Temprory Redirect
308 --> Permanent Redirect
400 --> Bad Request
401 --> Unauthorized
402 --> Payment Required
404 --> Not Found
500 --> Internal Server Error
504 --> Gateway timeOut


